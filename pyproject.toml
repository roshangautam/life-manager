[project]
name = "life-manager"
dynamic = [ "version" ]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
version = "0.1.0"
description = "A comprehensive household and personal finance management system"
readme = "README.md"
license = "MIT"
authors = [
    "Roshan Gautam <contact@roshangautam.com>",
]
packages = [
    {include = "api"},
    {include = "poetry"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = ">=3.8.1"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.22.0"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
bcrypt = "^4.0.1"
python-multipart = "^0.0.6"
pydantic = "^2.4.2"
pydantic-settings = "^2.0.3"
sqlalchemy = "^2.0.23"
alembic = "^1.12.1"
psycopg2-binary = "^2.9.9"
python-dotenv = "^1.0.0"
python-dateutil = "^2.8.2"
email-validator = "^2.1.0"
python-slugify = "^8.0.1"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
black = ">=22.3.0"
isort = ">=5.10.1"
mypy = ">=0.942"
pytest = ">=7.1.2"
pytest-cov = ">=3.0.0"
pytest-asyncio = ">=0.18.3"
httpx = ">=0.23.0"
flake8 = "^6.0.0"
pre-commit = "^3.0.0"
uvicorn = {extras = ["standard"], version = "^0.22.0"}
grpcio-tools = "^1.56.0"
grpcio = "^1.56.0"
grpcio-health-checking = "^1.56.0"
grpcio-reflection = "^1.56.0"
grpcio-testing = "^1.56.0"

[tool.poetry.urls]
Homepage = "https://github.com/yourusername/life-manager"
Documentation = "https://github.com/yourusername/life-manager#readme"
Issues = "https://github.com/yourusername/life-manager/issues"
Source = "https://github.com/yourusername/life-manager"

[tool.poetry.scripts]
# Main application
lifemanager = "api.__main__:run"

[project.scripts]
# Development Commands
format = "poetry.format:main"
lint = "poetry.lint:main"
test = "poetry.test:main"
coverage = "poetry.coverage:main"
clean = "poetry.clean:main"
init-db = "poetry.init_db:main"

# Database Commands
db-migrate = "poetry.db:migrate"
db-upgrade = "poetry.db:upgrade"
db-downgrade = "poetry.db:downgrade"
db-revision = "poetry.db:revision"
db-show = "poetry.db:show"
db-reset = "poetry.db:reset"

# gRPC Commands
grpc-generate = "poetry.grpc:generate"
grpc-clean = "poetry.grpc:clean"

# Server Management
server-run = "poetry.server:run"
server-dev = "poetry.server:dev"

# Docker Compose
docker-up = "poetry.docker:up"
docker-down = "poetry.docker:down"
docker-restart = "poetry.docker:restart"
docker-logs = "poetry.docker:logs"

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_context = true
show_column_numbers = true
show_error_end = true
pretty = true

[[tool.mypy.overrides]]
module = ["sqlalchemy.*", "alembic.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "-v --cov=api --cov-report=term-missing"
asyncio_mode = "auto"

[coverage.run]
source = ["api"]
omit = [
    "api/migrations/*",
    "**/__init__.py",
    "**/tests/*",
]

[coverage.report]
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
]
