[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "life-manager"
version = "0.1.0"
description = "A comprehensive household and personal finance management system"
readme = "README.md"
license = "MIT"
authors = [
    "Your Name <your.email@example.com>",
]
packages = [
    {include = "api"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = ">=3.8.1"

[tool.poetry.group.dev.dependencies]
black = ">=22.3.0"
isort = ">=5.10.1"
mypy = ">=0.942"
pytest = ">=7.1.2"
pytest-cov = ">=3.0.0"
pytest-asyncio = ">=0.18.3"
httpx = ">=0.23.0"
flake8 = "^6.0.0"
pre-commit = "^3.0.0"

[tool.poetry.urls]
Homepage = "https://github.com/yourusername/life-manager"
Documentation = "https://github.com/yourusername/life-manager#readme"
Issues = "https://github.com/yourusername/life-manager/issues"
Source = "https://github.com/yourusername/life-manager"

[tool.poetry.scripts]
lifemanager = "api.__main__:run"

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_context = true
show_column_numbers = true
show_error_end = true
pretty = true

[[tool.mypy.overrides]]
module = ["sqlalchemy.*", "alembic.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "-v --cov=api --cov-report=term-missing"
asyncio_mode = "auto"

[coverage.run]
source = ["api"]
omit = [
    "api/migrations/*",
    "**/__init__.py",
    "**/tests/*",
]

[coverage.report]
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
]
