name: Deploy to Azure

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]

# This workflow requires the following permissions to trigger
permissions:
  contents: read
  packages: read
  id-token: write  # Needed for Azure authentication
  issues: write

env:
  # Use GitHub Container Registry (GHCR)
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RESOURCE_GROUP: "wus3-domusai"
  CONTAINER_APP_NAME: "life-manager-app"
  CONTAINER_APP_API_NAME: "life-manager-api"
  CONTAINER_APP_DB_NAME: "life-manager-db"
  CONTAINER_APP_ENVIRONMENT: "wus3-domusai-container-environment"
  # Database settings
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
  POSTGRES_DB: lifemanager

jobs:
  check-ci:
    runs-on: ubuntu-latest
    outputs:
      ci-success: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check CI status
        id: check-ci
        run: |
          echo "CI workflow result: ${{ github.event.workflow_run.conclusion }}"
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "::error::CI workflow did not succeed"
            exit 1
          fi
  manual-approval:
    needs: [check-ci]
    runs-on: ubuntu-latest
    steps:
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: "roshangautam"
          issue-body: "Please approve this deployment"

  deploy:
    needs: manual-approval
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
    - name: Get the workflow run info
      uses: octokit/request-action@v2.x
      id: get_workflow_run
      with:
        route: GET /repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract commit SHA
      id: extract_sha
      run: |
        SHA=$(echo '${{ steps.get_workflow_run.outputs.data }}' | jq -r '.head_sha')
        echo "sha=$SHA" >> $GITHUB_OUTPUT

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Apps
      uses: azure/CLI@v1
      with:
        azcliversion: 2.40.0
        inlineScript: |
          # Install containerapp extension if not already installed
          az extension add --name containerapp --upgrade

          # Note: For production, it's better to use Azure Database for PostgreSQL
          # We'll deploy a PostgreSQL container without persistent storage since
          # Azure Container Apps doesn't fully support stateful workloads well

          echo "Setting up PostgreSQL as a managed resource..."

          # Check if we have a pre-existing managed PostgreSQL server
          if ! az postgres flexible-server show --name life-manager-db-server --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "Creating PostgreSQL server..."
            # Create a managed PostgreSQL instance
            az postgres flexible-server create \
              --name life-manager-db-server \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location westus3 \
              --admin-user ${{ env.POSTGRES_USER }} \
              --admin-password "${{ env.POSTGRES_PASSWORD }}" \
              --database-name ${{ env.POSTGRES_DB }} \
              --sku-name Standard_B1ms \
              --tier Burstable \
              --version 15 \
              --yes

            # Configure server to allow connections from Azure services
            az postgres flexible-server firewall-rule create \
              --name AllowAllAzureServices \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --server-name life-manager-db-server \
              --start-ip-address 0.0.0.0 \
              --end-ip-address 0.0.0.0
          else
            echo "PostgreSQL server already exists."
          fi

          # Get the PostgreSQL connection info
          DB_FQDN="life-manager-db-server.postgres.database.azure.com"

          echo "Using managed PostgreSQL server for database..."
          echo "Database FQDN: $DB_FQDN"

          # Get the image reference with the latest tag for API
          API_IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.extract_sha.outputs.sha }}"
          # Get the image reference with the latest tag for APP
          APP_IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-app:${{ steps.extract_sha.outputs.sha }}"

          echo "Deploying API image: $API_IMAGE_REF"

          # Create database connection string
          DB_CONNECTION="postgresql+psycopg2://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${DB_FQDN}:5432/${{ env.POSTGRES_DB }}"

          # Create or update the API container app
          if az containerapp show --name ${{ env.CONTAINER_APP_API_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "API Container app exists, updating..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_API_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image "$API_IMAGE_REF" \
              --set-env-vars "DATABASE_URL=${DB_CONNECTION}" \
              --liveness-probe "/healthz" \
              --readiness-probe "/readyz" \
              --cpu 1.0 \
              --memory 2Gi
          else
            echo "API Container app does not exist, creating..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_API_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
              --image "$API_IMAGE_REF" \
              --target-port 8000 \
              --ingress external \
              --cpu 1.0 \
              --memory 2Gi \
              --min-replicas 1 \
              --max-replicas 3 \
              --env-vars \
                "DATABASE_URL=${DB_CONNECTION}" \
                "ENV=production" \
              --liveness-probe "/healthz" \
              --readiness-probe "/readyz"
          fi

          # Get the API FQDN to use in the frontend configuration
          API_FQDN=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_API_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)

          echo "API FQDN: $API_FQDN"

          echo "Deploying APP image: $APP_IMAGE_REF"

          # Create or update the APP container app
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "APP Container app exists, updating..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --min-replicas 1 \
              --max-replicas 5 \
              --scale-rule-name "http-scale-rule" \
              --scale-rule-type "http" \
              --scale-rule-http-concurrency 100 \
              --image "$APP_IMAGE_REF" \
              --set-env-vars "VITE_API_URL=https://$API_FQDN"
          else
            echo "APP Container app does not exist, creating..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
              --image "$APP_IMAGE_REF" \
              --target-port 80 \
              --ingress external \
              --cpu 0.5 \
              --memory 1Gi \
              --min-replicas 1 \
              --max-replicas 5 \
              --scale-rule-name "http-scale-rule" \
              --scale-rule-type "http" \
              --scale-rule-http-concurrency 100 \
              --env-vars "VITE_API_URL=https://$API_FQDN"
          fi
