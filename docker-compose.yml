version: '3.8'

x-shared_environment: &shared_environment
  DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-lifemanager}
  REDIS_URL: redis://redis:6379/0
  # Enable debug mode in development
  DEBUG: "True"
  ENVIRONMENT: development
  # Disable email sending by default in development
  EMAILS_ENABLED: "False"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: life-manager-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-lifemanager}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-lifemanager}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: life-manager-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # API Service
  api:
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
    container_name: life-manager-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: *shared_environment
      # Override host for database and redis
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-lifemanager}
      REDIS_URL: redis://redis:6379/0
      # First superuser credentials (only used on first run)
      FIRST_SUPERUSER_EMAIL: ${FIRST_SUPERUSER_EMAIL:-admin@example.com}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD:-ChangeMe123!}
      FIRST_SUPERUSER_FULL_NAME: "${FIRST_SUPERUSER_FULL_NAME:-Admin User}"
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - .:/app
      - ./uploads:/app/uploads
    env_file:
      - .env
    restart: unless-stopped
    command: >
      sh -c "alembic upgrade head &&
             uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload"

  # Frontend Service (if you have a frontend)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: life-manager-frontend
  #   ports:
  #     - "${FRONTEND_PORT:-3000}:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     - NODE_ENV=development
  #     - REACT_APP_API_URL=http://localhost:8000/api/v1
  #   depends_on:
  #     - api
  #   restart: unless-stopped

  # PGAdmin (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: life-manager-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Commander (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: life-manager-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    restart: unless-stopped

  # MailHog for email testing (optional)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: life-manager-mailhog
    ports:
      - "${MAILHOG_HTTP_PORT:-8025}:8025"  # Web UI
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP server
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

# Networks
networks:
  default:
    name: life-manager-network
    driver: bridge
